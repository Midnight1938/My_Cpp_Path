#+title: About the code
#+author: Skshm

* Stuff we Learnt and should know
+ We can always lookup what an SDL Event does online, and view the wiki
+ Every Question regarding build answered in the basic program
+ Difference btwn a class and struct is that a struct has all vars public by default. Opposite is in Class
+ Degrees are measured in Radians in Programming

* Different from Basic Prog:

+ Window Creation and Destruction Moved to [[file:MovingUp/Screen.cpp][Screen.cpp]]
+ m_prefix in the header signifies that they are instance variables, not local
+ The Height and Width are constants because they dont change
+ Everything Related to Forming the Screen is also moved to [[file:MovingUp/Screen.cpp][Screen.cpp]]
+ Headers hold the libraries

** Updates now exist in their own sub class, and SetPixel is now used instead of memset duplicate
==Refer to the Shifty Bits for info on SetPixel==
- ? [(y * Scrn_Width) + x] sets the x,y coordinates into an index value in the buffer

+ We use trigonometry (sin) to make the colour dance as it goes from -1 to +1.
+ Unsigned char has the max value of 255, which is prefect as hex values cant go above that
+ Multiplied by 0.0001 to make it a bit uniform. And using natural numbers to make it range btwn 0 and 255
==TODO: Set trigs to sin, cos, tan for funny time==

*** The double (2.0 multip) in particles.h lets us move pixels conceptually, bit-by-bit, making stuff smoother
+ ? (double)rand()/RAND_MAX; returns a number btwn 0 <-> 1. (2.0 *rand()) makes it 0 <-> 2. '-1' makes it -1 <-> +1
#+BEGIN_SRC cpp
   const Particle * const getParticles() { return m_pParticles; };
#+END_SRC
Const pointer to a const particle
+ A check for on screen check is added to setPixels

+ **We update the positions of the particles by changing their coordinate values individually. The 'return if particles outside our limit' prevents crashes**
  - ? The 0.001 in random speed makes it not just give zeroes, and the 2.0 multip makes the range -1 <-> 1.
+ ~Why does it make a box in the bottom right?: Because we told it to range from 0 to 1 instead.~

#+BEGIN_SRC cpp
(y or x)Speed = m_Speed * (sin or cos)(m_Direction)
#+END_SRC
   Is the formula to find speed in said axis from 'global' speed and direction

** We now pick a random direction in circle, and a random speed, to make the explosion effect happen (without the two it explodes into a square)
==Set the m_x and m_y to 0, to get explotion from a point==
+ It looks oval because the screen is not a square, the mapping ends up in an oval
  * So we set the y in draw particles to width to center it horizontally.
  * Then add half of screen height to center it instead of having it explode on the top center
+ We still have an issue where it will run at different speeds on different systems depending on their power. May still be jittery on slow pcs

** Extra Info:
+ Interval makes it so that the amount we move the particle is proportional to the time passed since we last moved it.
+ boxBlur is a type of Blur algorityhm that we used. We take pixel value and set it to the 8 pixels around it.
  + Info About Bitshifting in [[file:Bitwise_And/BitwaiseAnd.cpp][BitwiseAnd File]]
  + ==Refer to Screen::boxBlur for more explaination==
+ We set the direction to change by a certain value to swirl the pixels, then set the pixel direction to said values.
