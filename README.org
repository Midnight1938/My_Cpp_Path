#+title: Learning Path and Important Commands
#+author: Skshm

** Extra Info
*** How to compile a 'Class'

+ Compile individual classes first
  - Then compile them all
  - Like so:
#+BEGIN_SRC bash
g++ File1.cpp File2.cpp -o $Compiled_Name
#+END_SRC

+ How to compile with SDL:
#+BEGIN_SRC bash
g++ $File_NAME.cpp -g -pedantic -o $File_NAME -lSDL2
g++ $File_NAME.cpp -o $File_NAME -lSDL2
#+END_SRC

*** Additional Information:
+ All programs contain comments explaining them

+ [[file:/Section_8:_Dev_a_Program/Before_We_Begin.org][Before We Begin Programming]]
+ [[file:/Section_8:_Dev_a_Program/CodeInfo.org][Information About the FireParticle Program]]
+ [[file:/Section_10:_Bonus/AboutBonusContent.org][Information Regarding Bonus Content]]

*** Whats the difference btwn =++i= and =i++=
+ i++ uses i and then adds one to it.
+ ++i adds one and then uses it.
+ Refer to [[file:/Section_10:_Bonus/Post_And_Prefix/PostAndPrefix.cpp][Post And Prefix program]] for more info

** Wonderful program stash has stuff for the following stuff

+ [[https://code.visualstudio.com/docs/cpp/config-linux][Setting Up C++ dependencies in VSCode]]
  * Iniialising Runs is in the site above, we can add lib dependencies in the tasks.json area easily
  * VS Code dependencies (ms-vscode.cpptools-extension-pack)

** [[file:/Section_1:_First_steps/][Getting Started]]

+ [X] 4. Hello World C++
+ [X] 5. Outputting Text

** [[file:/Section_2:_Basic_Syntax/][Basic Syntax]]

+ [X] 6. Variables
+ [X] 7. Strings - Working with Text
+ [X] 8. User Input
+ [X] 9. Binary Numbers and Computer Memory
+ [X] 10. Integer Types
+ [X] 11. Floating Point Types
+ [X] 12. Other Types: Char and Bool
+ [X] 13. If
+ [X] 14. If-Else
+ [X] 15. If-Else If-Else
+ [X] 16. Comparing Floats
+ [X] 17. C++ Conditions
+ [X] 18. While Loops
+ [X] 19. Do-While Loops
+ [X] 20. "For" Loops
+ [X] 21. Break and Continue
+ [X] 22. Arrays - Lists of Data
+ [X] 23. Multidimensional Arrays
+ [X] 24. Sizeof and Arrays
+ [X] 25. Sizeof Multidimensional Arrays
+ [X] 26. Switches

** [[file:/Section_3:_Subroutines/][Subroutines: Reusable Blocks of Code]]

+ [X] 27. Functions
+ [X] 28. Return Values
+ [X] 29. Function Parameters
+ [X] 30. Headers and Prototypes

** [[file:/Section_4:_OOP/][Object Oriented Coding]]

+ [X] 31. Classes
+ [X] 32. Data Members
+ [X] 33. C++ Constructors and Destructors
+ [X] 34. C++ Getters and Setters
+ [X] 35. C++ String Streams
+ [X] 36. Overloading Constructors
+ [X] 37. The "this" Keyword
+ [X] 38. Constructor Initialization Lists

** [[file:Section_5:_Pointers_and_Memory/][Pointers and Memory]]

+ [X] 39. Pointers
+ [X] 40. Arithmetic
+ [X] 41. Pointers and Arrays
+ [X] 42. Pointer Arithmetic
+ [X] 43. Char Arrays
+ [X] 44. Reversing a String
+ [X] 45. References
+ [X] 46. The "const" Keyword
+ [X] 47. Copy Constructors
+ [X] 48. The New Operator
+ [X] 49. Returning Objects from Functions
+ [X] 50. Allocating Memory
+ [X] 51. Arrays and Functions
+ [X] 52. Namespaces


** [[file:/Section_6:_Inheritance/][Inheritance]]

+ [X] 53. Inheritance
+ [X] 54. Encapsulation
+ [X] 55. Constructor Inheritance

** [[file:/Section_7:_Odds_n_Ends/][Odds and Ends: Twos Complement and Static Variables]]

+ [X] 56. Twos Complement
+ [X] 57. Static Keyword

** [[file:/Section_8:_Dev_a_Program/][Developing a Program: The Swirly Particle Sim]]

+ [X] 58. Particle Fire Explosion
+ [X] 59. Using C++ Libraries
+ [X] 60. Aquiring Simple Direct Media Layer
+ [X] 61. A Basic SDL Program
+ [X] 62. Creating an SDL Window
+ [X] 63. Textures, Renderers and Buffers
+ [X] 64. Setting Pixel Colors
+ [X] 65. Creating the Screen Class
+ [X] 66. Bit Shifting and Colors
+ [X] 67. Adding a Set Pixel Method
+ [X] 68. Animating Colors
+ [X] 69. Creating Particles
+ [X] 70. Animating Particles
+ [X] 71. Creating an Explosion
+ [X] 72. Ensuring Constant Speed
+ [X] 73. Bitwise "And"
+ [X] 74. Implementing Box Blur
+ [X] 75. Tweaking Particle Motion

** Conclusion:

*** Languages Overview
**** C
Was created in 1973 in Dennis Ritchie.
+ Based on Functions
+ Doesnt use classses and Object orientation was a later Dev
+ Still used today as its faster than C++ as Obj Orientation doesnt make significant difference in some progs.
  + Used for Low level apps, like Device Drivers
**** C++
Created by Bjarne Stroustrup in 1979
+ Added Classes to C, making it Object Oriented
+ Bulked up version of =C=
+ Is it an Anachorism? *No*
  - We cant do without it. Its still being developed
    * Latest Stable: <2020-12-15>
    * Latest Preview: <2021-06-18>
+ Its used to get the most out of the machine
+ Even used to develop Games
**** Java
Sun Microsystems now called Oracle made Java in 1995
+ Made on C++
+ A lot of people felt C++ was too hard.
  * Easy to make bugs
  * Had to recompile for different systems
+ Has a simulated computer to run its binaries, instead of running it directly on your pc.
  * Also allows us to run on any pc with Java
+ It is less prone to bugs as the VM does a lot of checking
  * Can check if you run off the end of an array
  * Has a garbage collector to auto deallocate Memory
+ Slower as it runs in its own
**** C#
Created by Anders Hejlsberg in 2000s under Microsoft /(Microsoft Language, like .NET)/
+ Uses a VM
+ Associated with Microsoft, also used to make websites and games, but closely associated with microsoft
  + Can also be used on Linux, and Unity game Development
+ Sort of High Level (like Python and Java)
**** Objective C
Created by Brad Cox and Tom Love in 1980s while working for Apple
+ Ultimately based on C++
  * Tied to apple the way C# is tied to Microsoft
+ Uses a lightweight VM too

*** What Next
Theres a lot that we havent covered. Some important TOPICS
+ Handling exceptions
  * Its not as important while programming in C++, but they help capture error one might miss easily
+ Standard Template Library (STL)
  * Helps work with data.
    - Like having resizable arrays
+ File Handling: reading, writing, appending the nine Yards
+ Learning about the new featues in the latest C++ release
+ *Simply practice programming in C++*
  - Ramake Tiny Python projects in C++
  - Game Dev often helps learn new things

** Bonus:

+ Object Oriented Design Considerations
  Always look at programs and simplyfy it as much as possible, put stuff in boxes as much as you want.

+ [X] Postfix and Prefix
+ [[file:/Section_10:_Bonus/AboutBonusContent.org#polymorphism][Polymorphism]]
+ [[file:/Section_10:_Bonus/AboutBonusContent.org#static-libraries][Creating Static Libraries]]
